   Question ï¼š
   Given a string array words, find the maximum value of length(word[i]) * length(word[j]) 
   where the two words do not share common letters. You may assume that each word will contain 
   only lower case letters. If no such two words exist, return 0.
   
   
    //solution 1 time limit exceed
    int maxProduct(vector<string>& words) {
      map<string, long> my_map;
      for (int i = 0; i < words.size(); ++ i) {
        long bit = 0;
        for (int j = 0; j < words[i].length(); ++ j) {
          if (words[i][j] >= '0' && words[i][j] <= '9') {
            bit = bit | (1 << (words[i][j] -'0' + 26));  
          } else {
            bit = bit | (1 << (words[i][j] -'a' ));  
          }     
        }
        my_map.insert(make_pair(words[i], bit));
      }
      int max_product = 0;
      for (int i = 0; i < words.size(); ++ i) {
        if (my_map.find(words[i]) == my_map.end()) continue;
        for (int j = i + 1; j < words.size(); ++ j) {
          if (my_map.find(words[j]) == my_map.end()) continue;
          if ((my_map[words[i]] & my_map[words[j]]) == 0 &&
               words[i].size() * words[j].size() > max_product ) {
            max_product = words[i].size() * words[j].size();  
          }
        }  
      }
      return max_product;
    }
    
    //solution 2, AC
    int maxProduct(vector<string>& words) {
      vector<long> bit_vec(words.size(), 0);
      int max_product = 0;
      for (int i = 0; i < words.size(); ++ i) {
        for (int j = 0; j < words[i].length(); ++ j) {
          if (words[i][j] >= '0' && words[i][j] <= '9') {
            bit_vec[i] |= (1 << (words[i][j] -'0' + 26));  
          } else {
            bit_vec[i] |= (1 << (words[i][j] -'a' ));  
          }     
        }
        for (int k = 0; k < i; ++ k) {
          if ((bit_vec[k] & bit_vec[i]) == 0)
            max_product = max(max_product, int(words[i].size() * words[k].size()));
        }
      }
      return max_product;
    }
    
    //solution 3 : get fromt the disscuss 
    int maxProduct(vector<string>& words) {
    unordered_map<int,int> maxlen;
    int result = 0;
    for (string word : words) {
        int mask = 0;
        for (char c : word)
            mask |= 1 << (c - 'a');
        maxlen[mask] = max(maxlen[mask], (int) word.size());
        for (auto maskAndLen : maxlen)
            if (!(mask & maskAndLen.first))
                result = max(result, (int) word.size() * maskAndLen.second);
    }
    return result;
}
    
